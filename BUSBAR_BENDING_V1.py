import sys
import math
import os
import hashlib
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QGridLayout, QLabel, QLineEdit,
                             QPushButton, QComboBox, QTextEdit, QGroupBox,
                             QSpinBox, QDoubleSpinBox, QTabWidget, QDialog, QMessageBox)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QPainter, QPen, QColor, QPixmap , QIcon
from datetime import datetime
import re

VALID_PASSKEY = "2681busbar6821"
class ResultsWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Calculation Results - Copper Busbar Calculator")
        self.setGeometry(200, 200, 800, 600)
        
        # Create central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Create results text area with bold, clear font
        self.results_display = QTextEdit()
        self.results_display.setReadOnly(True)
        self.results_display.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        
        # Style the results window
        self.results_display.setStyleSheet("""
            QTextEdit {
                background-color: white;
                color: black;
                border: 2px solid #B87333;
                padding: 10px;
                line-height: 1.5;
            }
        """)
        
        layout.addWidget(self.results_display)
        
        # Buttons layout
        button_layout = QHBoxLayout()
        
        # Export button
        export_button = QPushButton("Export to Text File")
        export_button.clicked.connect(self.export_results)
        export_button.setStyleSheet("""
            QPushButton {
                background-color: #228B22;
                color: white;
                border-radius: 5px;
                padding: 8px 15px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #32CD32;
            }
        """)
        
        # Close button (keep existing styling)
        close_button = QPushButton("Close")
        close_button.clicked.connect(self.close)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #B87333;
                color: white;
                border-radius: 5px;
                padding: 8px 15px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #D48A37;
            }
        """)
        
        button_layout.addWidget(export_button)
        button_layout.addWidget(close_button)
        layout.addLayout(button_layout)
        # Add engineer name to results window as well
        self.add_engineer_name(layout)
    
    def export_results(self):
        """Export the results to a text file with date and time"""
        try:
            # Get current date and time
            now = datetime.now()
            timestamp = now.strftime("%Y%m%d_%H%M%S")
            date_str = now.strftime("%Y-%m-%d %H:%M:%S")
            
            # Create filename with timestamp
            filename = f"Busbar_Calculation_Results_{timestamp}.txt"
            
            # Get the HTML content and convert to plain text
            html_content = self.results_display.toHtml()
            plain_text = self.html_to_plain_text(html_content)
            
            # Add header with date/time and engineer info
            export_content = f"""
=================================================================
COPPER BUSBAR BENDING CALCULATION RESULTS
=================================================================
Generated on: {date_str}
Engineer: Seif Mohamed
Email: seifmohamed606@gmail.com
Software: Copper Busbar Calculator v1.0
=================================================================

{plain_text}

=================================================================
End of Report - Generated by Copper Busbar Calculator
Engineer: Seif Mohamed | Email: seifmohamed606@gmail.com
=================================================================
"""
            
            # Write to file
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(export_content)
            
            # Show success message with custom style
            msg_box = QMessageBox(self)
            msg_box.setIcon(QMessageBox.Icon.Information)
            msg_box.setWindowTitle("Export Successful")
            msg_box.setText(f"Results exported successfully to:\n{filename}")
            msg_box.setStyleSheet("QLabel{color: #222; font-size: 13px;} QPushButton{color: #fff; background-color: #228B22; border-radius: 5px; padding: 6px 12px;}")
            msg_box.exec()
            
        except Exception as e:
            QMessageBox.critical(self, "Export Error", 
                               f"Failed to export results:\n{str(e)}")

    def html_to_plain_text(self, html_content):
        """Convert HTML content to plain text while preserving structure"""
        # Remove HTML tags but preserve structure
        text = re.sub(r'<br\s*/?>', '\n', html_content)
        text = re.sub(r'<hr[^>]*>', '\n' + '='*60 + '\n', text)
        text = re.sub(r'<h[1-6][^>]*>(.*?)</h[1-6]>', r'\n\1\n' + '='*40, text)
        text = re.sub(r'<p[^>]*>', '\n', text)
        text = re.sub(r'</p>', '', text)
        text = re.sub(r'<tr[^>]*>', '\n', text)
        text = re.sub(r'<td[^>]*>', ' ', text)
        text = re.sub(r'</td>', '  ', text)
        text = re.sub(r'</tr>', '', text)
        text = re.sub(r'<table[^>]*>', '\n', text)
        text = re.sub(r'</table>', '\n', text)
        text = re.sub(r'<span[^>]*>', '', text)
        text = re.sub(r'</span>', '', text)
        text = re.sub(r'<strong[^>]*>', '', text)
        text = re.sub(r'</strong>', '', text)
        text = re.sub(r'<[^>]+>', '', text)  # Remove any remaining HTML tags
        
        # Clean up whitespace
        text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # Remove extra blank lines
        text = re.sub(r'[ \t]+', ' ', text)  # Normalize spaces
        text = text.strip()
        
        return text
    def add_engineer_name(self, layout):
        """Add engineer name to the results window"""
        name_label = QLabel("Eng: Seif Mohamed")
        name_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        name_label.setStyleSheet("""
            QLabel {
                color: #B87333;
                font-size: 12px;
                font-weight: bold;
                font-style: italic;
                padding: 5px;
                background-color: transparent;
            }
        """)
        layout.addWidget(name_label)
    
    def display_results(self, title, content):
        """Display results in the window"""
        self.results_display.clear()
        
        # Format the content with proper HTML for better display
        formatted_content = f"""
        <h2 style="color: #B87333; text-align: center; margin-bottom: 20px;">
            ðŸ”¨ {title}
        </h2>
        <div style="font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.6;">
            {content}
        </div>
        """
        
        self.results_display.setHtml(formatted_content)
        self.show()
        self.raise_()
        self.activateWindow()

class ShapeDiagram(QLabel):
    def __init__(self, shape_type="L-Shape"):
        super().__init__()
        self.shape_type = shape_type
        self.setFixedSize(300, 200)
        # Gold-like border and background for a more "copper-ish" feel
        self.setStyleSheet("border: 2px solid #DAA520; background-color: #FFFACD;")
        self.update_diagram()

    def update_diagram(self):
        pixmap = QPixmap(300, 200)
        pixmap.fill(Qt.GlobalColor.white)

        painter = QPainter(pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)

        # Set up pens with copper-like colors
        line_pen = QPen(QColor("#B87333"), 4)  # Copper color, thicker line
        dimension_pen = QPen(QColor("#4169E1"), 2) # Royal blue for dimensions
        text_pen = QPen(QColor("#8B0000"), 2)    # Dark red for text

        painter.setPen(line_pen)

        if self.shape_type == "L-Shape":
            self.draw_l_shape(painter, dimension_pen, text_pen)
        elif self.shape_type == "U-Shape":
            self.draw_u_shape(painter, dimension_pen, text_pen)
        elif self.shape_type == "Z-Shape":
            self.draw_z_shape(painter, dimension_pen, text_pen)
        painter.end()
        self.setPixmap(pixmap)

    def draw_l_shape(self, painter, dim_pen, text_pen):
        # Draw L-shape
        painter.drawLine(50, 150, 150, 150)  # Horizontal line (Length A)
        painter.drawLine(150, 150, 150, 50)  # Vertical line (Length B)

        # Draw bend radius indicator
        painter.setPen(QPen(QColor("#696969"), 2, Qt.PenStyle.DashLine)) # Darker gray
        painter.drawArc(135, 135, 30, 30, 90*16, 90*16)  # Quarter circle for bend radius

        # Dimension lines
        painter.setPen(dim_pen)
        # Length A dimension
        painter.drawLine(50, 170, 150, 170)
        painter.drawLine(50, 165, 50, 175)
        painter.drawLine(150, 165, 150, 175)

        # Length B dimension
        painter.drawLine(170, 50, 170, 150)
        painter.drawLine(165, 50, 175, 50)
        painter.drawLine(165, 150, 175, 150)

        # Text labels
        painter.setPen(text_pen)
        painter.drawText(90, 185, "Length A")
        painter.drawText(180, 100, "Length B")
        painter.drawText(200, 30, "Thickness")
        painter.drawText(200, 45, "Width")
        painter.drawText(120, 120, "R")  # Bend radius

    def draw_u_shape(self, painter, dim_pen, text_pen):
        # Draw U-shape
        painter.drawLine(50, 50, 50, 150)   # Left vertical (Length A)
        painter.drawLine(50, 150, 150, 150) # Bottom horizontal (Length B)
        painter.drawLine(150, 150, 150, 50) # Right vertical (Length A)

        # Draw bend radius indicators
        painter.setPen(QPen(QColor("#696969"), 2, Qt.PenStyle.DashLine))
        painter.drawArc(35, 135, 30, 30, 0, 90*16)   # Left bend
        painter.drawArc(135, 135, 30, 30, 90*16, 90*16) # Right bend

        # Dimension lines
        painter.setPen(dim_pen)
        # Length A dimensions (both sides)
        painter.drawLine(30, 50, 30, 150)
        painter.drawLine(25, 50, 35, 50)
        painter.drawLine(25, 150, 35, 150)

        painter.drawLine(170, 50, 170, 150)
        painter.drawLine(165, 50, 175, 50)
        painter.drawLine(165, 150, 175, 150)

        # Length B dimension
        painter.drawLine(50, 170, 150, 170)
        painter.drawLine(50, 165, 50, 175)
        painter.drawLine(150, 165, 150, 175)

        # Text labels
        painter.setPen(text_pen)
        painter.drawText(5, 100, "A")
        painter.drawText(180, 100, "A")
        painter.drawText(90, 185, "Length B")
        painter.drawText(200, 30, "Thickness")
        painter.drawText(200, 45, "Width")
        painter.drawText(40, 125, "R")
        painter.drawText(140, 125, "R")

    def draw_z_shape(self, painter, dim_pen, text_pen):
        # Draw Z-shape
        painter.drawLine(50, 50, 150, 50)   # Top horizontal (Length A)
        painter.drawLine(150, 50, 100, 100) # Diagonal (Length B)
        painter.drawLine(100, 100, 200, 100) # Bottom horizontal (Length C)

        # Draw bend radius indicators
        painter.setPen(QPen(QColor("#696969"), 2, Qt.PenStyle.DashLine))
        painter.drawArc(135, 35, 30, 30, 180*16, 90*16)  # Top bend
        painter.drawArc(85, 85, 30, 30, 0, 90*16)        # Bottom bend

        # Dimension lines
        painter.setPen(dim_pen)
        # Length A dimension
        painter.drawLine(50, 30, 150, 30)
        painter.drawLine(50, 25, 50, 35)
        painter.drawLine(150, 25, 150, 35)

        # Length B dimension (diagonal)
        painter.drawLine(125, 75, 125, 85)

        # Length C dimension
        painter.drawLine(100, 120, 200, 120)
        painter.drawLine(100, 115, 100, 125)
        painter.drawLine(200, 115, 200, 125)

        # Text labels
        painter.setPen(text_pen)
        painter.drawText(90, 20, "Length A")
        painter.drawText(130, 80, "B")
        painter.drawText(140, 135, "Length C")
        painter.drawText(220, 30, "Thickness")
        painter.drawText(220, 45, "Width")
        painter.drawText(140, 30, "R")
        painter.drawText(90, 90, "R")

class PasskeyAuthDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Software Authorization - Copper Busbar Calculator")
        self.setModal(True)
        self.setFixedSize(400, 180)
        
        # Apply the same dark theme
        self.setStyleSheet("""
            QDialog {
                background-color: #2E2E2E;
                color: #E0E0E0;
            }
            QLabel {
                color: #E0E0E0;
                font-size: 12px;
            }
            QLineEdit {
                background-color: #4A4A4A;
                color: #FFFFFF;
                border: 1px solid #606060;
                padding: 5px;
                border-radius: 3px;
                font-size: 12px;
            }
            QPushButton {
                background-color: #B87333;
                color: white;
                border-radius: 5px;
                padding: 8px 15px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #D48A37;
            }
        """)
        
        layout = QVBoxLayout(self)
        
        # Title
        title_label = QLabel("Software Authorization Required")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #DAA520; margin-bottom: 10px;")
        layout.addWidget(title_label)
        
        # Instructions
        info_label = QLabel("Please enter the authorization passkey to use this software: \n"
                            "For more info contact Eng. Seif Mohamed \n"
                            "Email: seifmohamed606@gmail.com \n")
        info_label.setWordWrap(True)
        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(info_label)
        
        # Passkey input
        self.passkey_input = QLineEdit()
        self.passkey_input.setPlaceholderText("Enter passkey")
        self.passkey_input.setEchoMode(QLineEdit.EchoMode.Password)  # Hide password
        layout.addWidget(self.passkey_input)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        authorize_btn = QPushButton("Authorize")
        authorize_btn.clicked.connect(self.authorize)
        
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(authorize_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)
        
        # Allow Enter key to authorize
        self.passkey_input.returnPressed.connect(self.authorize)
    
    def authorize(self):
        entered_passkey = self.passkey_input.text().strip()
        if not entered_passkey:
            QMessageBox.warning(self, "Error", "Please enter the passkey.")
            return
        
        if entered_passkey == VALID_PASSKEY:
            self.accept()
        else:
            QMessageBox.critical(self, "Invalid Passkey", "The entered passkey is incorrect.")
            self.passkey_input.clear()
            self.passkey_input.setFocus()  
  
class BendingCalculator(QMainWindow):
    def __init__(self):
        super().__init__()
        if not self.check_authorization():
            sys.exit(1)  # Exit if not authorized
        self.setWindowTitle("Copper Busbar Bending Calculator - Eng. Seif Mohamed")
        self.setWindowIcon(QIcon('icon.png'))
        self.setGeometry(100, 100, 1000, 700)
        
        # Initialize results window
        self.results_window = None

        # Apply a dark theme with a copper accent
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2E2E2E; /* Dark grey */
                color: #E0E0E0; /* Light grey text */
            }
            QGroupBox {
                background-color: #3C3C3C; /* Slightly lighter dark grey */
                border: 2px solid #DAA520; /* Gold/Copper border */
                border-radius: 5px;
                margin-top: 1ex; /* Leave space for title */
                font-weight: bold;
                color: #DAA520; /* Gold/Copper title */
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center; /* Position at top center */
                padding: 0 3px;
                background-color: #2E2E2E; /* Match main window background */
            }
            QLabel {
                color: #E0E0E0; /* Light grey for labels */
            }
            QLineEdit, QSpinBox, QDoubleSpinBox, QComboBox, QTextEdit {
                background-color: #4A4A4A; /* Darker input fields */
                color: #FFFFFF; /* White text in input fields */
                border: 1px solid #606060;
                padding: 3px;
                border-radius: 3px;
            }
            QPushButton {
                background-color: #B87333; /* Copper color for buttons */
                color: white;
                border-radius: 5px;
                padding: 8px 15px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #D48A37; /* Lighter copper on hover */
            }
            QTabWidget::pane { /* The tab itself */
                border-top: 2px solid #DAA520; /* Gold/Copper line above tabs */
                background-color: #2E2E2E;
            }
            QTabBar::tab {
                background: #4A4A4A; /* Darker grey for inactive tabs */
                border: 1px solid #606060;
                border-bottom-color: #2E2E2E; /* Match pane background */
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                min-width: 8ex;
                padding: 5px;
                color: #E0E0E0;
            }
            QTabBar::tab:selected {
                background: #B87333; /* Copper color for selected tab */
                border-color: #DAA520;
                border-bottom-color: #B87333; /* Match selected tab color */
                color: white;
            }
            QTextEdit {
                border: 1px solid #B87333; /* Copper border for results */
                background-color: #3C3C3C;
                color: #E0E0E0;
            }
        """)

        # Create central widget and main layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # Create tab widget
        tab_widget = QTabWidget()
        main_layout.addWidget(tab_widget)

        # Multiple bars tab
        multiple_tab = QWidget()
        tab_widget.addTab(multiple_tab, "Multiple Bars")
        self.setup_multiple_bars_tab(multiple_tab)

        # Results area (kept for compatibility, but main results shown in new window)
        self.results_text = QTextEdit()
        self.results_text.setMaximumHeight(200)
        self.results_text.setFont(QFont("Courier", 10))
        main_layout.addWidget(QLabel("Results Preview (Full results open in new window):"))
        main_layout.addWidget(self.results_text)
        
        # Add engineer name at the bottom right corner
        self.add_engineer_signature(main_layout)
    
    def get_config_file_path(self):
        """Get the path for the configuration file"""
        # Store in user's home directory (hidden file)
        home_dir = os.path.expanduser("~")
        return os.path.join(home_dir, ".busbar_auth")

    def hash_passkey(self, passkey):
        """Create a hash of the passkey for security"""
        return hashlib.sha256(passkey.encode()).hexdigest()

    def save_authorized_session(self):
        """Save authorization token to config file"""
        try:
            config_path = self.get_config_file_path()
            auth_token = self.hash_passkey(VALID_PASSKEY + "authorized")
            
            with open(config_path, 'w') as f:
                f.write(auth_token)
            
            # Make file hidden on Windows
            if os.name == 'nt':
                try:
                    import ctypes
                    ctypes.windll.kernel32.SetFileAttributesW(config_path, 2)
                except:
                    pass  # Ignore if can't hide file
            
            return True
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to save authorization: {str(e)}")
            return False

    def load_authorized_session(self):
        """Load the authorization token from config file"""
        try:
            config_path = self.get_config_file_path()
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    return f.read().strip()
            return None
        except:
            return None

    def check_authorization(self):
        """Check if the software is authorized"""
        stored_token = self.load_authorized_session()
        expected_token = self.hash_passkey(VALID_PASSKEY + "authorized")
        
        if stored_token == expected_token:
            # Already authorized
            return True
        else:
            # Need to authorize
            dialog = PasskeyAuthDialog(self)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                if self.save_authorized_session():
                    return True
                else:
                    return False
            else:
                return False
    def add_engineer_signature(self, main_layout):
        """Add engineer name signature to the bottom right corner"""
        # Create a horizontal layout for the bottom section
        top_layout = QHBoxLayout()
        
        # Add a stretch to push the name to the right
        top_layout.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignTop)
        
        # Create the engineer name label
        engineer_name = QLabel("ðŸ”§ Eng: Seif Mohamed")
        engineer_name.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignTop)
        engineer_name.setStyleSheet("""
            QLabel {
                color: #DAA520;
                font-size: 14px;
                font-weight: bold;
                font-style: italic;
                padding: 10px;
                background-color: rgba(218, 165, 32, 0.1);
                border: 1px solid #DAA520;
                border-radius: 10px;
                margin: 5px;
            }
        """)
        
        top_layout.addStretch()
        top_layout.addWidget(engineer_name)
        main_layout.addStretch()
        main_layout.addLayout(top_layout)

    def setup_multiple_bars_tab(self, parent):
        layout = QHBoxLayout(parent)

        # Left side - Input parameters
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)

        # Multiple bars input
        multi_group = QGroupBox("Multiple Bars Configuration")
        multi_layout = QGridLayout(multi_group)

        multi_layout.addWidget(QLabel("Number of Bars:"), 0, 0)
        self.num_bars_spin = QSpinBox()
        self.num_bars_spin.setRange(1, 100)
        self.num_bars_spin.setValue(4)
        multi_layout.addWidget(self.num_bars_spin, 0, 1)

        multi_layout.addWidget(QLabel("Spacing Between Bars (mm):"), 1, 0)
        self.spacing_spin = QDoubleSpinBox()
        self.spacing_spin.setRange(0, 500.0)
        self.spacing_spin.setValue(0)
        multi_layout.addWidget(self.spacing_spin, 1, 1)

        multi_layout.addWidget(QLabel("Shape:"), 2, 0)
        self.multi_shape_combo = QComboBox()
        self.multi_shape_combo.addItems(["L-Shape", "U-Shape", "Z-Shape"]) 
        self.multi_shape_combo.setCurrentText("L-Shape")
        self.multi_shape_combo.currentTextChanged.connect(self.update_multi_diagram)
        
        multi_layout.addWidget(self.multi_shape_combo, 2, 1)

        multi_layout.addWidget(QLabel("Bar Thickness (mm):"), 3, 0)
        self.multi_thickness_spin = QDoubleSpinBox()
        self.multi_thickness_spin.setRange(0.1, 100)
        self.multi_thickness_spin.setValue(5)
        multi_layout.addWidget(self.multi_thickness_spin, 3, 1)

        multi_layout.addWidget(QLabel("Bar Width (mm):"), 4, 0)
        self.multi_width_spin = QDoubleSpinBox()
        self.multi_width_spin.setValue(100.0)
        self.multi_width_spin.setRange(0.1, 1000)
        multi_layout.addWidget(self.multi_width_spin, 4, 1)

        multi_layout.addWidget(QLabel("Bend Radius (mm):"), 5, 0)
        self.multi_bend_radius_spin = QDoubleSpinBox()
        self.multi_bend_radius_spin.setRange(0.1, 100.0)
        self.multi_bend_radius_spin.setValue(5)
        multi_layout.addWidget(self.multi_bend_radius_spin, 5, 1)

        multi_layout.addWidget(QLabel("Bend Angle 1 (degree):"), 6, 0)
        self.multi_bend_angle1_spin = QDoubleSpinBox()
        self.multi_bend_angle1_spin.setValue(135)
        self.multi_bend_angle1_spin.setRange(0, 180)
        multi_layout.addWidget(self.multi_bend_angle1_spin, 6, 1)

        multi_layout.addWidget(QLabel("Bend Angle 2 (degree):"), 7, 0)
        self.multi_bend_angle2_spin = QDoubleSpinBox()
        self.multi_bend_angle2_spin.setValue(135)
        self.multi_bend_angle2_spin.setRange(0, 180)
        multi_layout.addWidget(self.multi_bend_angle2_spin, 7, 1)

        multi_layout.addWidget(QLabel("K-Factor:"), 8, 0)
        self.multi_k_factor_spin = QDoubleSpinBox()
        self.multi_k_factor_spin.setRange(0.01, 1)
        self.multi_k_factor_spin.setValue(0.4)
        self.multi_k_factor_spin.setSingleStep(0.01)
        self.multi_k_factor_spin.setDecimals(3)
        multi_layout.addWidget(self.multi_k_factor_spin, 8, 1)

        multi_layout.addWidget(QLabel("Length A (mm):"), 9, 0)
        self.multi_length_a_spin = QDoubleSpinBox()
        self.multi_length_a_spin.setRange(1.0, 1000.0)
        self.multi_length_a_spin.setValue(500.0)
        multi_layout.addWidget(self.multi_length_a_spin, 9, 1)

        multi_layout.addWidget(QLabel("Length B (mm):"), 10, 0)
        self.multi_length_b_spin = QDoubleSpinBox()
        self.multi_length_b_spin.setRange(1.0, 1000.0)
        self.multi_length_b_spin.setValue(500.0)
        multi_layout.addWidget(self.multi_length_b_spin, 10, 1)

        multi_layout.addWidget(QLabel("Length C (mm):"), 11, 0)
        self.multi_length_c_spin = QDoubleSpinBox()
        self.multi_length_c_spin.setRange(0.0, 1000.0)
        self.multi_length_c_spin.setValue(500.0)
        multi_layout.addWidget(self.multi_length_c_spin, 11, 1)

        left_layout.addWidget(multi_group)

        # Calculate button
        multi_calc_button = QPushButton("Calculate Multiple Bars")
        multi_calc_button.clicked.connect(self.calculate_multiple_bars)
        left_layout.addWidget(multi_calc_button)

        layout.addWidget(left_widget)

        # Right side - Diagram
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)

        multi_diagram_group = QGroupBox("Shape Diagram & Spacing")
        multi_diagram_layout = QVBoxLayout(multi_diagram_group)

        self.multi_diagram = ShapeDiagram("L-Shape")
        multi_diagram_layout.addWidget(self.multi_diagram)

        # Add spacing diagram
        spacing_label = QLabel()
        spacing_label.setText(
            "<b style='font-size: 20px; color: #DAA520;'>Multiple Bars Layout:</b><br>"
            "<b style='font-size: 17px; color: #DAA520;'>Angle 2:</b> <span style='font-size: 16px;'>Ignore Angle 2 in case of L-shape. <br> Angle 2 is used in case of Z-shape EQUAL TO Angle 1</span><br>"
            "<b style='font-size: 17px; color: #DAA520;'>Length C:</b> <span style='font-size: 16px;'>Third segment length (Z-shape , U-shape only)</span>"
        )
        spacing_label.setWordWrap(True)
        # Styled to match the copper theme
        spacing_label.setStyleSheet("QLabel { background-color: #4A4A4A; padding: 8px; border: 1px solid #B87333; color: #E0E0E0; border-radius: 5px;}")
        multi_diagram_layout.addWidget(spacing_label)

        right_layout.addWidget(multi_diagram_group)
        layout.addWidget(right_widget)

    def calculate_bend_allowance(self, spacing, thickness, bend_radius, angle_degrees, k_factor):
        """
        Calculate bend allowance using the neutral axis method
        BA = (Ï€/180) Ã— (R + KÃ—T) Ã— A
        where K is the K-factor (typically 0.4 for copper)
        """
        angle_radians = math.radians(angle_degrees)
        bend_allowance = angle_radians * (bend_radius + k_factor * thickness)
        return bend_allowance

    def calculate_bend_deduction(self, spacing, thickness, bend_radius, angle_degrees , k_factor):
        """
        Calculate bend deduction: the amount to subtract from the flat length
        """
        bend_allowance = self.calculate_bend_allowance(spacing, thickness, bend_radius, angle_degrees , k_factor)
        # Outside setback for each leg
        setback = (bend_radius + thickness) * math.tan(math.radians(angle_degrees / 2))
        bend_deduction = 2 * setback - bend_allowance
        return bend_deduction

    def update_multi_diagram(self):
        """Update the diagram when shape selection changes in multiple bars tab"""
        shape = self.multi_shape_combo.currentText()
        if shape == "Z-Shape":
            self.multi_bend_angle2_spin.setEnabled(False)
            self.multi_bend_angle2_spin.setStyleSheet("background-color: gray; color: gray")
        else:
            self.multi_bend_angle2_spin.setEnabled(True)
            self.multi_bend_angle2_spin.setStyleSheet(
                "background-color: #4A4A4A; color: #FFFFFF; border: 1px solid #606060; padding: 3px; border-radius: 3px;")
        self.multi_diagram.shape_type = shape
        self.multi_diagram.update_diagram()

    def calculate_multiple_bars(self):
        num_bars = self.num_bars_spin.value()
        spacing = self.spacing_spin.value()
        shape = self.multi_shape_combo.currentText()
        thickness = self.multi_thickness_spin.value()
        width = self.multi_width_spin.value()
        bend_radius = self.multi_bend_radius_spin.value()
        length_a = self.multi_length_a_spin.value()
        length_b = self.multi_length_b_spin.value()
        length_c = self.multi_length_c_spin.value()
        bend_angle1 = self.multi_bend_angle1_spin.value()
        bend_angle2 = self.multi_bend_angle2_spin.value()
        k_factor = self.multi_k_factor_spin.value()

        # Clear preview results
        self.results_text.clear()
        self.results_text.append("Calculating... Results will open in new window")
        
        # Build detailed results content
        results_content = f"""
        <p style="font-size: 20px; font-weight: bold;">CALCULATION PARAMETERS:</p>
        <p style="font-size: 18px;">â€¢ Number of bars: <span style="color: #0066CC;">{num_bars}</span></p>
        <p style="font-size: 18px;">â€¢ Spacing between bars: <span style="color: #0066CC;">{spacing} mm</span></p>
        <p style="font-size: 18px;">â€¢ Shape: <span style="color: #0066CC;">{shape}</span></p>
        <p style="font-size: 18px;">â€¢ Material: <span style="color: #0066CC;">Copper</span></p>
        <p style="font-size: 18px;">â€¢ Bar Thickness: <span style="color: #0066CC;">{thickness} mm</span></p>
        <p style="font-size: 18px;">â€¢ Bar Width: <span style="color: #0066CC;">{width} mm</span></p>
        <p style="font-size: 18px;">â€¢ Bend Radius: <span style="color: #0066CC;">{bend_radius} mm</span></p>
        <p style="font-size: 18px;">â€¢ K-Factor: <span style="color: #0066CC;">{k_factor}</span></p>
        <br>
        """

        deduction1 = ((thickness + spacing)*math.tan(math.radians((180-bend_angle1) / 2)))
        if shape == "U-Shape":
            deduction2 = ((thickness + spacing)*math.tan(math.radians((180-bend_angle2) / 2)))
        total_flat_length = 0
        total_weight = 0

        results_content += "<p style='font-size: 20px; font-weight: bold;'>INDIVIDUAL BAR CALCULATIONS:</p>"
        results_content += "<hr style='border: 2px solid #B87333;'>"

        for i in range(num_bars):
            # Adjust lengths for each bar based on spacing and deduction
            if shape == "L-Shape":
                adjusted_length_a = length_a - i * deduction1
                adjusted_length_b = length_b - i * deduction1
                adjusted_length_c = length_c - i * deduction1
            elif shape == "U-Shape":
                adjusted_length_a = length_a - i * deduction1
                adjusted_length_b = length_b - i * (deduction1 + deduction2)
                adjusted_length_c = length_c - i * deduction2
            elif shape == "Z-Shape":
                adjusted_length_a = length_a - i * deduction1
                adjusted_length_b = length_b
                adjusted_length_c = length_c + i * deduction1

            single_result = self.calculate_bar_dimensions(shape, spacing , thickness, width, bend_radius,
                                                    adjusted_length_a, adjusted_length_b, adjusted_length_c, 180-bend_angle1, 180-bend_angle2 , k_factor)
            results_content += f"<p><span style='color: #B87333; font-size: 18px;'><strong>BAR #{i+1} DIMENSIONS:</strong></span></p>"
            results_content += "<table style='margin-left: 20px; margin-bottom: 15px;'>"
            for key, value in single_result.items():
                if isinstance(value, float):
                    results_content += f"<tr><td style='padding-right: 20px; font-size: 18px;'><strong>{key}:</strong></td><td><span style='color: #0066CC; font-size: 18px;'>{value:.2f} mm</span></td></tr>"
                else:
                    results_content += f"<tr><td style='padding-right: 20px; font-size: 18px;'><strong>{key}:</strong></td><td><span style='color: #0066CC; font-size: 18px;'>{value}</span></td></tr>"
            results_content += "<hr style='border: 2px solid #B87333;'>"
            results_content += "</table>"
            total_flat_length += single_result['Flat Length']
            total_weight += single_result['Weight']

        results_content += "<hr style='border: 2px solid #B87333;'>"
        results_content += "<p><strong style='color: #B87333; font-size: 16px;'>TOTAL MATERIAL REQUIREMENTS:</strong></p>"
        results_content += f"<p style='font-size: 21px;'>â€¢ <strong>Total flat length needed:</strong> <span style='color: #009900; font-size: 16px;'>{total_flat_length:.2f} mm</span></p>"
        results_content += f"<p style='font-size: 21px; '>â€¢ <strong>Total weight:</strong> <span style='color: #009900; font-size: 16px;'>{total_weight:.2f} g</span></p>"

        # Show results in new window
        if self.results_window is None:
            self.results_window = ResultsWindow(self)
        
        self.results_window.display_results("MULTIPLE BARS CALCULATION RESULTS", results_content)
        
        # Update preview
        self.results_text.clear()
        self.results_text.append(f"âœ“ Calculation Complete!")
        self.results_text.append(f"â€¢ {num_bars} bars calculated")
        self.results_text.append(f"â€¢ Total flat length: {total_flat_length:.2f} mm")
        self.results_text.append(f"â€¢ Total weight: {total_weight:.2f} g")
        self.results_text.append(f"\n>>> Full detailed results opened in new window <<<")

    def calculate_bar_dimensions(self, shape, spacing, thickness, width, bend_radius, length_a, length_b, length_c , bend_angle1 , bend_angle2 , k_factor):
        """Calculate dimensions for different bar shapes"""

        # Copper density: 8.96 g/cmÂ³
        copper_density = 8.96e-3  # g/mmÂ³

        results = {}

        if shape == "L-Shape":

            bend_deduction = self.calculate_bend_deduction(spacing ,thickness, bend_radius, bend_angle1 , k_factor)

            # Flat length = leg1 + leg2 - bend_deduction
            flat_length = length_a + length_b - bend_deduction

            # Bend location from start
            bend_location = length_a - (bend_deduction/2)

            results.update({
                'Flat Length': flat_length,
                'Bend Location': bend_location,
                'Bend Deduction': bend_deduction,
                'Leg A Length': length_a,
                'Leg B Length': length_b
            })

        elif shape == "U-Shape":
            # U-shape has two bending angels
            # First angle bending calculation
            bend_deduction1 = self.calculate_bend_deduction(spacing, thickness, bend_radius, bend_angle1 , k_factor)
            flat_length = length_a + length_b + length_c - bend_deduction1 # Initial flat length after first bend
            bend1_location = length_a - ((bend_deduction1) / 2)
            if bend_angle1 == 45:
                flat_length = flat_length -thickness # Adjust for 45 degree bend

            # Second angle bending calculation
            bend_deduction2 = self.calculate_bend_deduction(spacing, thickness, bend_radius, bend_angle2 , k_factor)
            flat_length -= bend_deduction2 # Deduct for the second bend
            if bend_angle2 == 45:
                flat_length = flat_length -  thickness # Adjust for 45 degree bend
            bend2_location = flat_length - length_c + ((bend_deduction2) / 2)
            results.update({
                'Flat Length': flat_length,
                'First Bend Location': bend1_location,
                'Second Bend Location': bend2_location,
                'Leg A Length': length_a,
                'Leg B Length': length_b,
                'Leg C Length': length_c
            })

        elif shape == "Z-Shape":

            # First angle bending calculation
            bend_deduction1 = self.calculate_bend_deduction(spacing, thickness, bend_radius, bend_angle1 , k_factor)
            flat_length = length_a + length_b + length_c - bend_deduction1 # Initial flat length after first bend
            bend1_location = length_a - ((bend_deduction1) / 2)
            if bend_angle1 == 45:
                flat_length = flat_length -thickness # Adjust for 45 degree bend

            # Second angle bending calculation
            bend_deduction2 = self.calculate_bend_deduction(spacing, thickness, bend_radius, bend_angle1 , k_factor)
            flat_length -= bend_deduction2 # Deduct for the second bend
            if bend_angle1 == 45:
                flat_length = flat_length -  thickness # Adjust for 45 degree bend
            bend2_location = flat_length - (length_c - ((bend_deduction2) / 2))

            results.update({
                'Flat Length': flat_length,
                'First Bend Location': bend1_location,
                'Second Bend Location': bend2_location,
                'First Leg Length': length_a,
                'Middle Length': length_b,
                'Third Leg Length': length_c
            })

        # Calculate weight
        volume = flat_length * width * thickness  # mmÂ³
        weight = volume * copper_density  # grams
        results['Weight'] = weight

        return results

def main():
    app = QApplication(sys.argv)
    calculator = BendingCalculator()
    calculator.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()